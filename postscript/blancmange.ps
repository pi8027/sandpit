
/compl { % act list <compl> list'
    [
        2 index
        2 index 0 get
        3 index dup length 1 sub 1 exch getinterval { % act a b
            1 index 1 index 4 index exec % act a b (a b act)
            4 3 roll 3 2 roll % a (a b act) act b
        } forall
        exch pop
    ]
    exch pop exch pop
} def

/gen { % list n <gen> list'
    dup 0 eq {
        pop
    } { % list n
        [1 2 index bitshift /add cvx /add cvx 2 /idiv cvx] cvx % list n act
        3 2 roll % n act list
        compl % n list'
        exch 1 sub gen % list''
    } ifelse
} def

/blancmange { % x y z n <blancmange> -
    dup [0 0] exch gen % x y z n result
    4 index 4 index moveto % x y z n result
    0 1 1 4 index bitshift { % x y z n result m
        dup 4 index mul 6 index add exch % x y z n result x' m
        2 index exch get 4 index mul 5 index add % x y z n result x' y'
        lineto % x y z n result
    } for
    5 { pop } repeat
} def

50 50 1 9 blancmange stroke

